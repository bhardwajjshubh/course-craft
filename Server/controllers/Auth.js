const bcrypt = require("bcrypt");
const User = require("../models/User");
const OTP = require("../models/OTP");
const jwt = require("jsonwebtoken");
const otpGenerator = require("otp-generator");
const mailSender = require("../utils/mailSender");
const { passwordUpdated } = require("../mail/templates/passwordUpdate");
const Profile = require("../models/Profile");
require("dotenv").config();

// controller for signup
const signUp = async (req, res) => {
  try {
    // data fetch from request body
    const {
      firstName,
      lastName,
      email,
      password,
      confirmPassword,
      accountType,
      contactNumber,
      otp,
    } = req.body;

    // validating the values
    if (
      !firstName ||
      !lastName ||
      !email ||
      !password ||
      !confirmPassword ||
      !otp
    ) {
      return res.status(403).json({
        success: false,
        message: "All fields are required",
      });
    }

    // matching the two passwords
    if (password !== confirmPassword) {
      return res.status(400).json({
        success: false,
        message:
          "Password and ConfirmPassword Value does not match, please try again",
      });
    }

    // check user already exist or not
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({
        success: false,
        message: "User is already registered",
      });
    }

    // find most recent OTP stored for the user
    // NOTE :-> { createdAt: -1 } argument specifies that the results should be sorted by the createdAt field in descending order (-1). This means the most recently created document (the latest OTP entry for the specified email) will be the first in the result set.
    // .limit(1): This method limits the number of documents returned by the query to 1. Since the results are already sorted in descending order by the createdAt field, this effectively means the query will return the most recent OTP document for the specified email.
    const response = await OTP.find({ email }).sort({ createdAt: -1 }).limit(1); //find most recent OTP stored for the user or most recent OTP generated for user;

    // validate OTP , Lenght 0 so OTP not found
    if (response.length === 0) {
      return res.status(400).json({
        success: false,
        message: "OTP NOT Found",
      });
      // if otp entered by user != actual otp then returns invalid otp
    } else if (otp !== response[0].otp) {
      return res.status(400).json({
        // here otp is entered by user and response[0].otp is generated by controller;
        success: false,
        message: "Invalid OTP",
      });
    }

    //Hashed the password
    const hashedPassword = await bcrypt.hash(password, 10);

    // Create the user
    let approved = "";
    approved === "Instructor" ? (approved = false) : (approved = true);

    //created entry in Profile in DB
    const profileDetails = await Profile.create({
      gender: null,
      dateOfBirth: null,
      about: null,
      contactNumer: null,
    });

    //created entry in User in DB
    // `https://api.dicebear.com/5.x/initials/svg?seed=${firstName} ${lastName}` -> generates an profile image corresponding with the name
    const user = await User.create({
      firstName,
      lastName,
      email,
      contactNumber,
      password: hashedPassword,
      accountType: accountType,
      approved: approved,
      additionalDetails: profileDetails._id,
      image: `https://api.dicebear.com/5.x/initials/svg?seed=${firstName} ${lastName}`,
    });

    //return res
    return res.status(200).json({
      success: true,
      user,
      message: "User is registered Successfully",
    });
  } catch (error) {
    console.log(error);
    return res.status(500).json({
      success: false,
      message: "User cannot be registrered. Please try again",
    });
  }
};

//Login
const login = async (req, res) => {
  try {
    //get data from req body
    const { email, password } = req.body;

    // validate krlo means all inbox are filled or not;
    if (!email || !password) {
      return res.status(403).json({
        success: false,
        message: "Please Fill up All the Required Fields",
      });
    }

    //user check exist or not
    const user = await User.findOne({ email }).populate("additionalDetails");
    if (!user) {
      return res.status(401).json({
        success: false,
        message: "User is not registrered, please signup first",
      });
    }

    // generate JWT, after password matching/comparing
    if (await bcrypt.compare(password, user.password)) {
      // generate payload;
      const payload = {
        email: user.email,
        id: user._id,
        accountType: user.accountType,
      };

      // generate token (combination of header , payload , signature)
      const token = jwt.sign(payload, process.env.JWT_SECRET, {
        expiresIn: "20h", // set expiry time;
      });
      user.token = token;
      user.password = undefined;

      //create cookie and send response
      const options = {
        expires: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000),
        httpOnly: true,
      };
      res.cookie("token", token, options).status(200).json({
        success: true,
        token,
        user,
        message: "Logged in successfully",
      });
    } else {
      return res.status(401).json({
        success: false,
        message: "Password is incorrect",
      });
    }
  } catch (error) {
    console.log(error);
    return res.status(500).json({
      success: false,
      message: "Login Failure, please try again",
    });
  }
};

// controller for sending otp on email
const sendOTP = async (req, res) => {
  try {
    //fetch email from request body
    const { email } = req.body;

    //check if user already exist
    const checkUserPresent = await User.findOne({ email });

    //if user already exist , then return a response
    if (checkUserPresent) {
      return res.status(401).json({
        success: false,
        message: "User already registered",
      });
    }

    //generate otp of 6 digit number do not contain uppercase, lowercase, specialchar
    var otp = otpGenerator.generate(6, {
      upperCaseAlphabets: false,
      lowerCaseAlphabets: false,
      specialChars: false,
    });
    console.log("OTP generated: ", otp);

    //check unique otp or not
    let result = await OTP.findOne({ otp: otp });
    // if result is true so we regenerate otp;
    while (result) {
      otp = otpGenerator.generate(6, {
        upperCaseAlphabets: false,
      });
    }

    const otpPayload = { email, otp };

    //create an entry in OTP in DB and this OTP is used in SignUp to find response;
    const otpBody = await OTP.create(otpPayload);
    console.log("OTP Body", otpBody);

    //return response successful
    res.status(200).json({
      success: true,
      message: "OTP Sent Successfully",
      otp,
    });
  } catch (error) {
    console.log(error);
    return res.status(500).json({
      success: false,
      message: error.message,
    });
  }
};

// Controller for Changing Password
const changePassword = async (req, res) => {
  try {
    const userDetails = await User.findById(req.user.id); // Get user data from req.user
    const { oldPassword, newPassword, confirmNewPassword } = req.body; // Get old password, new password, and confirm new password from req.body

    const isPasswordMatch = await bcrypt.compare(
      oldPassword,
      userDetails.password
    ); // Validate old password

    if (!isPasswordMatch) {
      // If old password does not match, return a 401 (Unauthorized) error
      return res
        .status(401)
        .json({ success: false, message: "The password is incorrect" });
    }

    if (newPassword !== confirmNewPassword) {
      // Match new password and confirm new password
      return res.status(401).json({
        success: false,
        message: "The password and confirm password does not match",
      });
    }

    const encryptedPassword = await bcrypt.hash(newPassword, 10); // Update password
    const updatedUserDetails = await User.findByIdAndUpdate(
      req.user.id,
      { password: encryptedPassword },
      { new: true }
    );
    // find user by id and then update password = encryptedPassword , here if you "const updatedUserDetails =" does not wirte this then also it not affect;

    try {
      // Send notification email , here passwordUpdated is template of email which is send to user;
      const emailResponse = await mailSender(
        updatedUserDetails.email,
        passwordUpdated(
          updatedUserDetails.email,
          `Password updated successfully for ${updatedUserDetails.firstName} ${updatedUserDetails.lastName}`
        )
      );
      console.log("Email sent successfully:", emailResponse.response);
    } catch (error) {
      return res.status(500).json({
        success: false,
        message: "Error occurred while sending email",
        error: error.message,
      });
    }

    // Return success response
    return res.status(200).json({
      success: true,
      message: "Password updated successfully",
    });
  } catch (error) {
    console.error("Error occurred while updating password:", error);
    return res.status(500).json({
      success: false,
      message: "Error occurred while updating password",
      error: error.message,
    });
  }
};

module.exports = { signUp, login, sendOTP, changePassword };
